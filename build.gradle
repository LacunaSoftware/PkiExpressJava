plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'signing'
}

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

group = 'com.lacunasoftware.pkiexpress'
archivesBaseName = 'pki-express'
version = '1.21.5'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.6.1'
}

java {
    withJavadocJar()
    withSourcesJar()
}

sourceSets {
    main.java.srcDirs = ['src/main/java']
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            groupId = group
            artifactId = "pki-express"
            version = version

            pom {
                name = 'pki-express'
                packaging = 'jar'
                description = 'Classes to use Lacuna Software PKI Express'
                url = 'https://github.com/LacunaSoftware/PkiExpressJava'

                scm {
                    connection = 'scm:git:git@github.com:LacunaSoftware/PkiExpressJava.git'
                    developerConnection = 'scm:git:git@github.com:LacunaSoftware/PkiExpressJava.git'
                    url = 'https://github.com/LacunaSoftware/PkiExpressJava'
                }

                licenses {
                    license {
                        name = 'Unlicense'
                    }
                }

                developers {
                    developer {
                        id = 'ismaelm'
                        name = 'Ismael Medeiros'
                        email = 'IsmaelM@lacunasoftware.com'
                    }
                    developer {
                        id = 'danilob'
                        name = 'Danilo Bispo'
                        email = 'DaniloB@lacunasoftware.com'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url = determineRepositoryUrl()
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

def determineRepositoryUrl() {
    def version = project.version.toString()
    if (version.endsWith('SNAPSHOT')) {
        return "https://s01.oss.sonatype.org/content/repositories/snapshots/"
    } else {
        return "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
    }
}

signing {
    sign publishing.publications.mavenJava
    sign configurations.archives
}
